// MIT License
//
// Copyright (c) 2019 kpango (Yusuke Kato)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

syntax = "proto3";

package payload;

option go_package = "github.com/vdaas/vald/apis/grpc/payload";
option java_multiple_files = true;
option java_package = "org.vdaas.vald.payload";
option java_outer_classname = "ValdPayload";

import "validate/validate.proto";
/*
import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";
 */

message Search {

  message Request {
    Object.Vector vector = 1;
    Config config = 2;
  }

  message IDRequest {
    Object.ID id = 1;
    Config config = 2;
  }

  message Config {
    uint32 num = 1 [(validate.rules).uint32.gte = 1];
    float radius = 2;
    float epsilon = 3;
  }

  message Response {
    repeated Object.Distance results = 1;
    Common.Error error = 2;
  }
}

message Object {
  message Distance {
    ID id = 1;
    float distance = 2;
  }

  message ID { string id = 1 [(validate.rules).string.min_len = 1]; }
  message IDs { repeated ID ids = 1; }

  message Vector {
    ID id = 1;
    repeated double vector = 2 [(validate.rules).repeated.min_items = 2];
  }
  message Vectors { repeated Vector vectors = 1; }
}

message Controll {
  message CreateIndexRequest {
    uint32 pool_size = 1 [(validate.rules).uint32.gte = 0];
  }
}

message Info {
  message Agent {
    string ip = 1 [(validate.rules).string.ipv4 = true];
    uint32 count = 2 [(validate.rules).uint32.gte = 0];
    string state = 3;
    Common.Error error = 4;
  }
  message Agents {
    repeated Agent Agents = 1 [(validate.rules).repeated.min_items = 1];
  }
}

message Common {
  message Empty {}
  message Error {
    uint32 code = 1 [(validate.rules).uint32.gte = 0];
    string msg = 2;
    int64 timestamp = 3;
  }
  message Errors { repeated Error errors = 1; }
}
