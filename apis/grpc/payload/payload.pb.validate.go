// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: payload.proto

package payload

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// define the regex for a UUID once up-front
var _payload_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Search with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Search) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// SearchValidationError is the validation error returned by Search.Validate if
// the designated constraints aren't met.
type SearchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchValidationError) ErrorName() string { return "SearchValidationError" }

// Error satisfies the builtin error interface
func (e SearchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchValidationError{}

// Validate checks the field values on Object with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Object) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ObjectValidationError is the validation error returned by Object.Validate if
// the designated constraints aren't met.
type ObjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectValidationError) ErrorName() string { return "ObjectValidationError" }

// Error satisfies the builtin error interface
func (e ObjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectValidationError{}

// Validate checks the field values on Controll with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Controll) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ControllValidationError is the validation error returned by
// Controll.Validate if the designated constraints aren't met.
type ControllValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ControllValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ControllValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ControllValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ControllValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ControllValidationError) ErrorName() string { return "ControllValidationError" }

// Error satisfies the builtin error interface
func (e ControllValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sControll.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ControllValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ControllValidationError{}

// Validate checks the field values on Info with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Info) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// InfoValidationError is the validation error returned by Info.Validate if the
// designated constraints aren't met.
type InfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InfoValidationError) ErrorName() string { return "InfoValidationError" }

// Error satisfies the builtin error interface
func (e InfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InfoValidationError{}

// Validate checks the field values on Common with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Common) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CommonValidationError is the validation error returned by Common.Validate if
// the designated constraints aren't met.
type CommonValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommonValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommonValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommonValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommonValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommonValidationError) ErrorName() string { return "CommonValidationError" }

// Error satisfies the builtin error interface
func (e CommonValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommon.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommonValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommonValidationError{}

// Validate checks the field values on Search_Request with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Search_Request) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetVector()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return Search_RequestValidationError{
					field:  "Vector",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetConfig()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return Search_RequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// Search_RequestValidationError is the validation error returned by
// Search_Request.Validate if the designated constraints aren't met.
type Search_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Search_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Search_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Search_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Search_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Search_RequestValidationError) ErrorName() string { return "Search_RequestValidationError" }

// Error satisfies the builtin error interface
func (e Search_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearch_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Search_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Search_RequestValidationError{}

// Validate checks the field values on Search_IDRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *Search_IDRequest) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetId()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return Search_IDRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetConfig()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return Search_IDRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// Search_IDRequestValidationError is the validation error returned by
// Search_IDRequest.Validate if the designated constraints aren't met.
type Search_IDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Search_IDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Search_IDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Search_IDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Search_IDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Search_IDRequestValidationError) ErrorName() string { return "Search_IDRequestValidationError" }

// Error satisfies the builtin error interface
func (e Search_IDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearch_IDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Search_IDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Search_IDRequestValidationError{}

// Validate checks the field values on Search_Config with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Search_Config) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetNum() < 1 {
		return Search_ConfigValidationError{
			field:  "Num",
			reason: "value must be greater than or equal to 1",
		}
	}

	// no validation rules for Radius

	// no validation rules for Epsilon

	return nil
}

// Search_ConfigValidationError is the validation error returned by
// Search_Config.Validate if the designated constraints aren't met.
type Search_ConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Search_ConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Search_ConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Search_ConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Search_ConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Search_ConfigValidationError) ErrorName() string { return "Search_ConfigValidationError" }

// Error satisfies the builtin error interface
func (e Search_ConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearch_Config.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Search_ConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Search_ConfigValidationError{}

// Validate checks the field values on Search_Response with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *Search_Response) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return Search_ResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	{
		tmp := m.GetError()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return Search_ResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// Search_ResponseValidationError is the validation error returned by
// Search_Response.Validate if the designated constraints aren't met.
type Search_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Search_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Search_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Search_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Search_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Search_ResponseValidationError) ErrorName() string { return "Search_ResponseValidationError" }

// Error satisfies the builtin error interface
func (e Search_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearch_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Search_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Search_ResponseValidationError{}

// Validate checks the field values on Object_Distance with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *Object_Distance) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetId()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return Object_DistanceValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	// no validation rules for Distance

	return nil
}

// Object_DistanceValidationError is the validation error returned by
// Object_Distance.Validate if the designated constraints aren't met.
type Object_DistanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Object_DistanceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Object_DistanceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Object_DistanceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Object_DistanceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Object_DistanceValidationError) ErrorName() string { return "Object_DistanceValidationError" }

// Error satisfies the builtin error interface
func (e Object_DistanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObject_Distance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Object_DistanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Object_DistanceValidationError{}

// Validate checks the field values on Object_ID with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Object_ID) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return Object_IDValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// Object_IDValidationError is the validation error returned by
// Object_ID.Validate if the designated constraints aren't met.
type Object_IDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Object_IDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Object_IDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Object_IDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Object_IDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Object_IDValidationError) ErrorName() string { return "Object_IDValidationError" }

// Error satisfies the builtin error interface
func (e Object_IDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObject_ID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Object_IDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Object_IDValidationError{}

// Validate checks the field values on Object_IDs with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Object_IDs) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetIds() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return Object_IDsValidationError{
						field:  fmt.Sprintf("Ids[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// Object_IDsValidationError is the validation error returned by
// Object_IDs.Validate if the designated constraints aren't met.
type Object_IDsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Object_IDsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Object_IDsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Object_IDsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Object_IDsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Object_IDsValidationError) ErrorName() string { return "Object_IDsValidationError" }

// Error satisfies the builtin error interface
func (e Object_IDsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObject_IDs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Object_IDsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Object_IDsValidationError{}

// Validate checks the field values on Object_Vector with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Object_Vector) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetId()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return Object_VectorValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	if len(m.GetVector()) < 2 {
		return Object_VectorValidationError{
			field:  "Vector",
			reason: "value must contain at least 2 item(s)",
		}
	}

	return nil
}

// Object_VectorValidationError is the validation error returned by
// Object_Vector.Validate if the designated constraints aren't met.
type Object_VectorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Object_VectorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Object_VectorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Object_VectorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Object_VectorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Object_VectorValidationError) ErrorName() string { return "Object_VectorValidationError" }

// Error satisfies the builtin error interface
func (e Object_VectorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObject_Vector.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Object_VectorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Object_VectorValidationError{}

// Validate checks the field values on Object_Vectors with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Object_Vectors) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetVectors() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return Object_VectorsValidationError{
						field:  fmt.Sprintf("Vectors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// Object_VectorsValidationError is the validation error returned by
// Object_Vectors.Validate if the designated constraints aren't met.
type Object_VectorsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Object_VectorsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Object_VectorsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Object_VectorsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Object_VectorsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Object_VectorsValidationError) ErrorName() string { return "Object_VectorsValidationError" }

// Error satisfies the builtin error interface
func (e Object_VectorsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObject_Vectors.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Object_VectorsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Object_VectorsValidationError{}

// Validate checks the field values on Controll_CreateIndexRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Controll_CreateIndexRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetPoolSize() < 0 {
		return Controll_CreateIndexRequestValidationError{
			field:  "PoolSize",
			reason: "value must be greater than or equal to 0",
		}
	}

	return nil
}

// Controll_CreateIndexRequestValidationError is the validation error returned
// by Controll_CreateIndexRequest.Validate if the designated constraints
// aren't met.
type Controll_CreateIndexRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Controll_CreateIndexRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Controll_CreateIndexRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Controll_CreateIndexRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Controll_CreateIndexRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Controll_CreateIndexRequestValidationError) ErrorName() string {
	return "Controll_CreateIndexRequestValidationError"
}

// Error satisfies the builtin error interface
func (e Controll_CreateIndexRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sControll_CreateIndexRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Controll_CreateIndexRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Controll_CreateIndexRequestValidationError{}

// Validate checks the field values on Info_Agent with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Info_Agent) Validate() error {
	if m == nil {
		return nil
	}

	if ip := net.ParseIP(m.GetIp()); ip == nil || ip.To4() == nil {
		return Info_AgentValidationError{
			field:  "Ip",
			reason: "value must be a valid IPv4 address",
		}
	}

	if m.GetCount() < 0 {
		return Info_AgentValidationError{
			field:  "Count",
			reason: "value must be greater than or equal to 0",
		}
	}

	// no validation rules for State

	{
		tmp := m.GetError()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return Info_AgentValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// Info_AgentValidationError is the validation error returned by
// Info_Agent.Validate if the designated constraints aren't met.
type Info_AgentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Info_AgentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Info_AgentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Info_AgentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Info_AgentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Info_AgentValidationError) ErrorName() string { return "Info_AgentValidationError" }

// Error satisfies the builtin error interface
func (e Info_AgentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInfo_Agent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Info_AgentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Info_AgentValidationError{}

// Validate checks the field values on Info_Agents with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Info_Agents) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetAgents()) < 1 {
		return Info_AgentsValidationError{
			field:  "Agents",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetAgents() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return Info_AgentsValidationError{
						field:  fmt.Sprintf("Agents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// Info_AgentsValidationError is the validation error returned by
// Info_Agents.Validate if the designated constraints aren't met.
type Info_AgentsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Info_AgentsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Info_AgentsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Info_AgentsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Info_AgentsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Info_AgentsValidationError) ErrorName() string { return "Info_AgentsValidationError" }

// Error satisfies the builtin error interface
func (e Info_AgentsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInfo_Agents.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Info_AgentsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Info_AgentsValidationError{}

// Validate checks the field values on Common_Empty with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Common_Empty) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// Common_EmptyValidationError is the validation error returned by
// Common_Empty.Validate if the designated constraints aren't met.
type Common_EmptyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Common_EmptyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Common_EmptyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Common_EmptyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Common_EmptyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Common_EmptyValidationError) ErrorName() string { return "Common_EmptyValidationError" }

// Error satisfies the builtin error interface
func (e Common_EmptyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommon_Empty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Common_EmptyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Common_EmptyValidationError{}

// Validate checks the field values on Common_Error with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Common_Error) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetCode() < 0 {
		return Common_ErrorValidationError{
			field:  "Code",
			reason: "value must be greater than or equal to 0",
		}
	}

	// no validation rules for Msg

	// no validation rules for Timestamp

	return nil
}

// Common_ErrorValidationError is the validation error returned by
// Common_Error.Validate if the designated constraints aren't met.
type Common_ErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Common_ErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Common_ErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Common_ErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Common_ErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Common_ErrorValidationError) ErrorName() string { return "Common_ErrorValidationError" }

// Error satisfies the builtin error interface
func (e Common_ErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommon_Error.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Common_ErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Common_ErrorValidationError{}

// Validate checks the field values on Common_Errors with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Common_Errors) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return Common_ErrorsValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// Common_ErrorsValidationError is the validation error returned by
// Common_Errors.Validate if the designated constraints aren't met.
type Common_ErrorsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Common_ErrorsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Common_ErrorsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Common_ErrorsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Common_ErrorsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Common_ErrorsValidationError) ErrorName() string { return "Common_ErrorsValidationError" }

// Error satisfies the builtin error interface
func (e Common_ErrorsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommon_Errors.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Common_ErrorsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Common_ErrorsValidationError{}
